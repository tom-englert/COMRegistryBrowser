<Window x:Class="DataGridExtensionsSample.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        xmlns:src="clr-namespace:DataGridExtensionsSample"
        xmlns:dgx="clr-namespace:DataGridExtensions;assembly=DataGridExtensions"
        DataContext="{Binding RelativeSource={RelativeSource Mode=Self}}"
        Title="DataGrid dgx sample">
  <Window.Resources>

    <dgx:RegexContentFilterFactory x:Key="RegexContentFilterFactory"/>
    <dgx:SimpleContentFilterFactory x:Key="SimpleContentFilterFactory"/>

    <!-- Template for a simple integer dgx control. -->
    <ControlTemplate x:Key="IntegerFilter">
      <src:IntegerGreatherThanFilterControl Filter="{Binding Path=Filter, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=dgx:DataGridFilterColumnControl}}"/>
    </ControlTemplate>

  </Window.Resources>

  <Grid>
    <Grid.ColumnDefinitions>
      <ColumnDefinition/>
      <ColumnDefinition Width="Auto"/>
      <ColumnDefinition/>
    </Grid.ColumnDefinitions>

    <!-- The left grid shows how to customize the filters when using auto generated columns. 
        See the DataGrid_AutoGeneratingColumn event handler for details. 
        Overrides the content filter factory to use the regex matching instead of the default simple "string contains" matching.
    -->
    <DataGrid ItemsSource="{Binding Items}" 
              AutoGeneratingColumn="DataGrid_AutoGeneratingColumn"
              dgx:DataGridFilter.ContentFilterFactory="{StaticResource RegexContentFilterFactory}"
              dgx:DataGridFilter.IsAutoFilterEnabled="True"
              >
      <DataGrid.ColumnHeaderStyle>
        <Style TargetType="DataGridColumnHeader">
          <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        </Style>
      </DataGrid.ColumnHeaderStyle>
    </DataGrid>

    <GridSplitter Grid.Column="1" Width="3" HorizontalAlignment="Center"/>

    <!-- The right grid shows how to customize the filters in XAML when using explicit generated columns. 
    -->

    <DataGrid ItemsSource="{Binding Items}" Grid.Column="2"
              AutoGenerateColumns="False"
              dgx:DataGridFilter.IsAutoFilterEnabled="True"
              >
      <DataGrid.Resources>
        <!-- Override the filter icon used in the default templates with an orange symbol; active for this grid only -->
        <ControlTemplate x:Key="{x:Static dgx:DataGridFilter.IconTemplateKey}">
          <Path Data="M0,0 L10,0 6,4 6,9 4,9 4,4 Z" Fill="Orange" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="2,0"/>
        </ControlTemplate>
      </DataGrid.Resources>
      
      <DataGrid.Columns>
        <!-- Use a check box column for the boolean property "Flag" but override the column data type to use the default text filter template. -->
        <DataGridCheckBoxColumn Header="Bool/Text" Binding="{Binding Flag, Mode=OneWay}" dgx:DataGridFilterColumn.Template="{StaticResource {x:Static dgx:DataGridFilter.TextColumnFilterTemplateKey}}"/>
        <!-- Use the integer filter for the integer column. -->
        <DataGridTextColumn Header="Integer/Custom" Binding="{Binding Index, Mode=OneWay}" dgx:DataGridFilterColumn.Template="{StaticResource IntegerFilter}"/>
        <!-- Hide the filter for this column. -->
        <DataGridTextColumn Header="Text/No Filter" Binding="{Binding Column1, Mode=OneWay}" dgx:DataGridFilterColumn.IsFilterVisible="False"/>
        <!-- Use the default filter for this column. -->
        <DataGridTextColumn Header="Text/Text" Binding="{Binding Column2, Mode=OneWay}"/>
        <!-- Use the default filter for this column. -->
        <DataGridTextColumn Header="Double/Text" Binding="{Binding Probability, Mode=OneWay}"/>
      </DataGrid.Columns>
    </DataGrid>

  </Grid>
</Window>
